pipeline {
    agent any

    parameters {
        choice(name: 'HOSTNAME', choices: ['206.189.183.0', '64.227.4.159', '198.199.72.34','157.230.91.190', '159.223.128.46', '159.203.182.152'], description: 'the host to push the build to')
        choice(name: 'TENANT_NAME', choices: ['test', 'alpha', 'intake', 'swerve', 'sap'], description: 'The tenant name will be appended to beginning of domain')
        choice(name: 'BASE_DOMAIN', choices: ['.techvvs.io', '.jenkins.codes'], description: 'domain')
    }

    stages {
        stage('Install Nginx') {
            steps {
                script {
                    sshagent(credentials: ['id_ed2_techvvs']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no techvvs@${params.HOSTNAME} << 'EOF'

                            # Update package list
                            if ! sudo apt-get update -y; then
                                echo "Failed to update package list" >&2
                                exit 1
                            fi

                            # Install Nginx
                            if ! sudo apt-get install -y nginx; then
                                echo "Failed to install Nginx" >&2
                                exit 1
                            fi

                            # Enable Nginx to start on boot
                            if ! sudo systemctl enable nginx; then
                                echo "Failed to enable Nginx to start on boot" >&2
                                exit 1
                            fi


                            echo "Nginx installed."

EOF
                        """
                    }
                }
            }
        }


        stage('Configure Nginx Reverse Proxy') {
            steps {
                script {
                    sshagent(credentials: ['id_ed2_techvvs']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no techvvs@${params.HOSTNAME} << 'EOF'

                            # Update the default Nginx configuration file to set up the reverse proxy
                            sudo bash -c 'cat > /etc/nginx/sites-available/default' << EOL
                            server {
                                listen 80 default_server;
                                listen [::]:80 default_server;

                                root /var/www/html;
                                index index.html index.htm index.nginx-debian.html;

                                server_name _;

                                location / {
                                    proxy_pass http://localhost:8081/;
                                }
                            }

                            server {
                                root /var/www/html;
                                index index.html index.htm index.nginx-debian.html;
                                server_name ${params.TENANT_NAME}${params.BASE_DOMAIN}; # managed by Certbot

                                client_max_body_size 200M;

                                location / {
                                    proxy_pass http://localhost:8081/;
                                }
                            }
EOL

                            # Test Nginx configuration
                            sudo nginx -t

                            echo "Nginx configuration updated with reverse proxy settings."

EOF
                        """
                    }
                }
            }
        }

        stage('Install Certbot and Configure SSL') {
            steps {
                script {
                    sshagent(credentials: ['id_ed2_techvvs']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no techvvs@${params.HOSTNAME} << 'EOF'

                            # Check if ports 80 and 443 are in use
                            if sudo lsof -i :80 || sudo lsof -i :443; then
                                echo "Ports 80 or 443 are already in use. Stopping conflicting services."
                                sudo systemctl stop nginx || true  # Attempt to stop Nginx if running
                            fi

                            # Proceed with Nginx and Certbot installation only if ports are free
                            sudo apt-get update -y
                            sudo apt-get install -y certbot python3-certbot-nginx

                            # Check if SSL certificate already exists
                            CERT_PATH="/etc/letsencrypt/live/${params.TENANT_NAME}${params.BASE_DOMAIN}/fullchain.pem"
                            if [ ! -f "\$CERT_PATH" ]; then
                                echo "Generating SSL certificate for ${params.TENANT_NAME}${params.BASE_DOMAIN}."
                                sudo certbot --nginx -d ${params.TENANT_NAME}${params.BASE_DOMAIN} --non-interactive --agree-tos --email admin@techvvs.io
                            else
                                echo "SSL certificate already exists for ${params.TENANT_NAME}${params.BASE_DOMAIN}. Skipping generation."
                            fi
EOF
                        """
                    }
                }
            }
        }




        stage('Verify Nginx Setup') {
            steps {
                script {
                    def url = "https://${params.TENANT_NAME}${params.BASE_DOMAIN}"
                    def response = httpRequest(url: url, validResponseCodes: '502')

                    if (!response.content.contains("nginx")) {
                        error "Verification failed: 'nginx' text not found in the response from ${url}"
                    } else {
                        echo "Verification successful: 'nginx' text found in the response from ${url}"
                    }
                }
            }
        }

    }
}
