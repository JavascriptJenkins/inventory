// Define parameters
pipeline {
    agent any


    tools {
        maven 'maven3' // Use the name you specified in Global Tool Configuration
    }




    // Define a branch parameter to allow selection of the branch at runtime
    parameters {
        choice(name: 'BRANCH', choices: ['test1', 'prod', 'joebranch', 'peterbranch'], description: 'Branch to build')
        choice(name: 'HOSTNAME', choices: ['206.189.183.0', '64.227.4.159', '198.199.72.34','157.230.91.190', '159.223.128.46', '159.203.182.152'], description: 'the host to push the build to')
        choice(name: 'TENANT_ENV', choices: ['inventory_test', 'highland_prod', 'inventory_prod', 'intake_prod', 'swerve_prod', 'sap_prod'], description: 'the tenant and environment name to build')
        choice(name: 'TENANT_NAME', choices: ['test', 'alpha', 'intake', 'swerve', 'sap'], description: 'The tenant name will be appended to beginning of domain')
        choice(name: 'BASE_DOMAIN', choices: ['.techvvs.io', '.jenkins.codes'], description: 'domain')
        string(name: 'LOAD_REF_DATA', defaultValue: 'no', description: 'Value for load.ref.data (leave blank to keep default)')
        string(name: 'ENVIRONMENT_NAME', defaultValue: 'prod', description: 'environment name, prod and dev1 are the optional values')
        string(name: 'DB_TYPE', defaultValue: 'postgresql', description: 'type of database.  only inventory uses h2')
        string(name: 'DB_H2_CONSOLE_ENABLED', defaultValue: 'false', description: 'type of database.  only inventory uses h2')
        string(name: 'DB_H2_WEB_ALLOWOTHERS', defaultValue: 'false', description: 'type of database.  only inventory uses h2')
        string(name: 'DB_DRIVER_CLASS_NAME', defaultValue: 'org.postgresql.Driver', description: 'type of database.  only inventory uses h2')
        string(name: 'DB_JPA_DATABASE_PLATFORM', defaultValue: 'org.hibernate.dialect.PostgreSQLDialect', description: 'type of database.  only inventory uses h2')
        string(name: 'DB_JPA_HIBERNATE_DIALECT', defaultValue: 'org.hibernate.dialect.PostgreSQLDialect', description: 'type of database.  only inventory uses h2')
        string(name: 'DB_URI', defaultValue: 'jdbc:postgresql://private-postgresql-test1-do-user-1326368-0.d.db.ondigitalocean.com:25060', description: 'datasource uri')
        string(name: 'DB_USERNAME', defaultValue: 'doadmin', description: 'spring data username')
        string(name: 'SPRING_DATABASE_ACTION', defaultValue: 'update', description: 'this value will control create-drop, update, etc')
        string(name: 'MAX_FILE_SIZE', defaultValue: '500MB', description: 'key for signing tokens')
        string(name: 'MAX_REQ_SIZE', defaultValue: '500MB', description: 'key for signing tokens')
        string(name: 'BASE_QR_DOMAIN', defaultValue: 'https://qr.jenkins.codes', description: 'this will get set to the hostname... ')

    }

    stages {

       stage('Select Hostname') {
            steps {
                script {

                    // Define a map of tenants to IP addresses
                    TENANT_IP_MAP = [
                        'inventory_prod': '64.227.4.159',
                        'highland_prod': '157.230.91.190',
                        'inventory_test': '206.189.183.0',
                        'intake_prod': '64.227.18.215',
                        'swerve_prod': '159.223.128.46',
                        'sap_prod': '159.203.182.152'
                    ]

                    // Define a map of tenants to IP addresses
                    POSTGRESQL_ENV_MAP = [
                        'inventory_prod': '',
                        'highland_prod': 'jdbc:postgresql://private-postgresql-test1-do-user-1326368-0.d.db.ondigitalocean.com:25060',
                        'inventory_test': 'jdbc:postgresql://private-postgresql-test1-do-user-1326368-0.d.db.ondigitalocean.com:25060',
                        'swerve_prod': 'jdbc:postgresql://private-postgresql-prod1-do-user-1326368-0.d.db.ondigitalocean.com:25060',
                        'intake_prod': 'jdbc:postgresql://private-postgresql-prod1-do-user-1326368-0.d.db.ondigitalocean.com:25060',
                        'sap_prod': 'jdbc:postgresql://private-postgresql-prod1-do-user-1326368-0.d.db.ondigitalocean.com:25060'
                    ]


                    // Get the IP address for the selected tenant
                    def hostname = TENANT_IP_MAP[params.TENANT_ENV]
                    echo "Selected Tenant: ${params.TENANT_ENV}, IP Address: ${hostname}"

                    // Get the IP address for the selected tenant
                    def postgresql_db_uri = POSTGRESQL_ENV_MAP[params.TENANT_ENV]
                    echo "Selected postgresql_db_uri: ${params.TENANT_ENV}, POSTGRE SQL DB URI: ${postgresql_db_uri}"

                    // Set the IP address as an environment variable for use in later stages
                    env.HOSTNAME = hostname
                    //env.BASE_QR_DOMAIN = hostname
                    env.DB_URI = postgresql_db_uri
                }
            }
        }

        stage('Checkout') {
            steps {
                // Check out the code from the specified branch
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${params.BRANCH}"]],
                    userRemoteConfigs: [[url: 'https://github.com/javascriptjenkins/inventory.git', credentialsId: 'githubcreds']]
                ])
            }
        }

        stage('Update Properties') {
            steps {
                script {
                    // Load multiple credentials simultaneously
                    withCredentials([
                        string(credentialsId: 'TWILIO_API_USER', variable: 'TWILIO_API_USER'),
                        string(credentialsId: 'TWILIO_API_PASSWORD', variable: 'TWILIO_API_PASSWORD'),
                        string(credentialsId: 'SENDGRID_API_KEY', variable: 'SENDGRID_API_KEY'),
                         string(credentialsId: 'POSTGRE_TEST_DB_PASSWORD', variable: 'POSTGRE_TEST_DB_PASSWORD'),
                         string(credentialsId: 'POSTGRE_PROD_DB_PASSWORD', variable: 'POSTGRE_PROD_DB_PASSWORD'),
                         string(credentialsId: 'JWT_SECRET_KEY', variable: 'JWT_SECRET_KEY')
                    ])
                    {
                        dir('inventory') {
                            sh "ls -l"
                            // Replace spring.profiles.active if provided
                            if (params.ENVIRONMENT_NAME) {
                                sh "sed -i 's/^spring\\.profiles\\.active=.*/spring.profiles.active=${params.ENVIRONMENT_NAME}/' src/main/resources/application.properties"
                            }
                            // Only replace if LOAD_REF_DATA parameter is provided
                            if (params.LOAD_REF_DATA) {
                                // Replace the `load.ref.data` property value in application.properties
                                sh "sed -i 's/^load\\.ref\\.data=.*/load.ref.data=${params.LOAD_REF_DATA}/' src/main/resources/application.properties"
                            }
                            // Replace spring.datasource.username if provided
                            if (params.DB_USERNAME) {
                                sh "sed -i 's/^spring\\.datasource\\.username=.*/spring.datasource.username=${params.DB_USERNAME}/' src/main/resources/application.properties"
                            }
                            // Replace spring.jpa.hibernate.ddl-auto if provided
                            if (params.SPRING_DATABASE_ACTION) {
                                sh "sed -i 's/^spring\\.jpa\\.hibernate\\.ddl-auto=.*/spring.jpa.hibernate.ddl-auto=${params.SPRING_DATABASE_ACTION}/' src/main/resources/application.properties"
                            }
                            // Replace spring.datasource.driver-class-name if provided
                            if (params.DB_DRIVER_CLASS_NAME) {
                                sh "sed -i 's/^spring\\.datasource\\.driver-class-name=.*/spring.datasource.driver-class-name=${params.DB_DRIVER_CLASS_NAME}/' src/main/resources/application.properties"
                            }
                            // Replace spring.jpa.database-platform if provided
                            if (params.DB_JPA_DATABASE_PLATFORM) {
                                sh "sed -i 's/^spring\\.jpa\\.database-platform=.*/spring.jpa.database-platform=${params.DB_JPA_DATABASE_PLATFORM}/' src/main/resources/application.properties"
                            }
                            // Replace spring.jpa.properties.hibernate.dialect if provided
                            if (params.DB_JPA_HIBERNATE_DIALECT) {
                                sh "sed -i 's/^spring\\.jpa\\.properties\\.hibernate\\.dialect=.*/spring.jpa.properties.hibernate.dialect=${params.DB_JPA_HIBERNATE_DIALECT}/' src/main/resources/application.properties"
                            }
                            // Replace spring.datasource.url if provided
                            if (params.DB_URI) {
                                env.DB_URI="${env.DB_URI}/${env.TENANT_NAME}?sslmode=require"
                                echo "Updated DB_URI: ${env.DB_URI}"
                                sh "sed -i 's|^spring\\.datasource\\.url=.*|spring.datasource.url=${env.DB_URI}|' src/main/resources/application.properties"
                            }
                            // Replace spring.h2.console.enabled if provided
                            if (params.DB_H2_CONSOLE_ENABLED) {
                                sh "sed -i 's/^spring\\.h2\\.console\\.enabled=.*/spring.h2.console.enabled=${params.DB_H2_CONSOLE_ENABLED}/' src/main/resources/application.properties"
                            }

                            // Replace spring.h2.console.settings.web-allow-others if provided
                            if (params.DB_H2_WEB_ALLOWOTHERS) {
                                sh "sed -i 's/^spring\\.h2\\.console\\.settings\\.web-allow-others=.*/spring.h2.console.settings.web-allow-others=${params.DB_H2_WEB_ALLOWOTHERS}/' src/main/resources/application.properties"
                            }

                            // Replace the qr ddomain if provided
//                             env.BASE_QR_DOMAIN="https://${env.TENANT_NAME}${env.BASE_DOMAIN}"
                            echo "BASE_QR_DOMAIN: ${env.BASE_QR_DOMAIN}"
                            sh "sed -i 's|^base\\.qr\\.domain=.*|base.qr.domain=${env.BASE_QR_DOMAIN}|' src/main/resources/application.properties"


                            sh "sed -i 's/^twilio\\.api\\.username=.*/twilio.api.username=${TWILIO_API_USER}/' src/main/resources/application.properties"
                            sh "sed -i 's/^twilio\\.api\\.password=.*/twilio.api.password=${TWILIO_API_PASSWORD}/' src/main/resources/application.properties"
                            sh "sed -i 's/^sendgrid\\.api\\.key=.*/sendgrid.api.key=${SENDGRID_API_KEY}/' src/main/resources/application.properties"
                            sh "sed -i 's/^security\\.jwt\\.token\\.secret-key=.*/security.jwt.token.secret-key=${JWT_SECRET_KEY}/' src/main/resources/application.properties"


                            if (env.TENANT_ENV.contains('prod') && !env.TENANT_ENV.contains('highland')) {
                                echo "Environment contains 'prod'. This is a production environment."
                                // Update production-specific settings
                                sh """
                                    sed -i 's/^spring\\.datasource\\.password=.*/spring.datasource.password=${POSTGRE_PROD_DB_PASSWORD}/' src/main/resources/application.properties
                                """
                            } else if (env.TENANT_ENV.contains('test') || env.TENANT_ENV.contains('highland')) {
                                
                                echo "Environment contains 'test'. This is a testing environment."
                                // Update test-specific settings
                                sh """
                                    sed -i 's/^spring\\.datasource\\.password=.*/spring.datasource.password=${POSTGRE_TEST_DB_PASSWORD}/' src/main/resources/application.properties
                                """
                            } else {
                                echo "Environment is unknown or does not contain 'prod' or 'test'."
                                // Add default or error handling steps here
                            }



                        }
                    }
                }
            }
        }


        stage('Replace URLs') {
            steps {
                script {
                    // Run within the 'inventory' directory
                    dir('inventory') {
                        // Define the base URL with TENANT_NAME dynamically replacing 'inventory'
                        def baseUrl = "https://${env.TENANT_NAME}${env.BASE_DOMAIN}"

                        // Find all files in src/main/java and src/main/resources and replace occurrences
                        sh """
                            find src/main/java src/main/resources -type f -exec sed -i 's|http://localhost:8080|${baseUrl}|g' {} +
                        """
                    }
                }
            }
        }


        stage('Build') {
            steps {
                script {
                    // Change directory to /inventory
                    dir('inventory') {
                        // Check if pom.xml exists within the /inventory directory
                        if (fileExists('pom.xml')) {
                            // Run Maven build
                            sh 'mvn clean install'
                        } else {
                            error 'pom.xml not found in the /inventory directory! Ensure this is a Maven project.'
                        }
                    }
                }
            }
        }


        stage('Stop Java Process') {
            steps {
                sshagent(credentials: ['id_ed2_techvvs']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no techvvs@${params.HOSTNAME} "sudo killall java -15 || echo 'No Java process found to kill'"
                    """
                }
            }
        }

        stage('Copy Font Files') {
            steps {
                script {
                    dir('inventory') {
                        sshagent(credentials: ['id_ed2_techvvs']) {
                            sh """
                                scp -o StrictHostKeyChecking=no -r uploads/font/ techvvs@${params.HOSTNAME}:~/deployments/inventory/uploads
                            """
                        }
                    }
                }
            }
        }

        stage('Copy Global User Files') {
            steps {
                script {
                    dir('inventory') {
                        sshagent(credentials: ['id_ed2_techvvs']) {
                            // Ensure the target directory exists
                            sh """
                                ssh -o StrictHostKeyChecking=no techvvs@${params.HOSTNAME} "mkdir -p ~/deployments/inventory/uploads/globaluserfiles"
                            """

                            // Copy the files
                            sh """
                                scp -o StrictHostKeyChecking=no -r uploads/globaluserfiles techvvs@${params.HOSTNAME}:~/deployments/inventory/uploads
                            """
                        }
                    }
                }
            }
        }



       stage('Deploy') {
            when {
                expression { params.HOSTNAME != '' } // Only run if HOSTNAME parameter is provided
            }
            steps {
                sshagent(credentials: ['id_ed2_techvvs']) {
                    script {
                        def jarFile = 'inventory/target/inventory-0.0.1-SNAPSHOT.jar'

                        if (fileExists(jarFile)) {
                            // Run remote commands to stop the Java process and move existing JAR to backup
                            sh """
                                ssh -o StrictHostKeyChecking=no techvvs@${params.HOSTNAME} << EOF
                                    sudo killall java -15 || echo "No Java process found to kill"
                                    sudo mv /home/techvvs/deployments/inventory/inventory-0.0.1-SNAPSHOT.jar /home/techvvs/deployments/inventory/backupdep/inventory-0.0.1-SNAPSHOT.jar || echo "No existing JAR to move"
EOF
                            """

                            // Copy the new .jar file to the remote server
                            sh """
                                scp -o StrictHostKeyChecking=no ${jarFile} techvvs@${params.HOSTNAME}:/home/techvvs/deployments/inventory/
                            """

                    // Start the application and tail the log for 15 seconds
                            sh """
                                ssh -o StrictHostKeyChecking=no techvvs@${params.HOSTNAME} << 'EOF'
                                cd /home/techvvs/deployments/inventory
                                sudo su -c "nohup java -jar inventory-0.0.1-SNAPSHOT.jar > app.log 2>&1 &" -s /bin/sh techvvs
                                sleep 2  # Give a moment for the app to start and write to the log
                                sudo timeout 60 tail -f app.log || true
EOF
                            """
                        } else {
                            error "JAR file not found at ${jarFile}"
                        }
                    }
                }
            }

       }

        stage('Check Application Status') {
            steps {
                script {
                    def url = "https://${env.TENANT_NAME}${env.BASE_DOMAIN}/login"
                    def response = httpRequest(
                        url: url,
                        httpMode: 'GET',
                        validResponseCodes: '200'  // Expecting a 200 response
                    )
                    echo "Application is up and returned 200 OK for ${url}."
                }
            }
        }

    }
}
