pipeline {
    agent any

    tools {
        maven 'maven3' // Use the name specified in Global Tool Configuration
    }

    parameters {
        string(name: 'SYSTEM_USER_TO_ACTIVATE', defaultValue: 'myuser@techvvs.io', description: 'enter in the username to activate')
        choice(name: 'BRANCH', choices: ['test1', 'prod', 'joebranch', 'peterbranch'], description: 'Branch to build')
        choice(name: 'HOSTNAME', choices: ['206.189.183.0', '64.227.4.159', '198.199.72.34','157.230.91.190'], description: 'the host to push the build to')
        choice(name: 'TENANT_ENV', choices: ['inventory_test', 'highland_prod', 'inventory_prod', 'intake_prod'], description: 'the tenant and environment name to build')
        choice(name: 'TENANT_NAME', choices: ['test', 'alpha', 'intake'], description: 'The tenant name will be appended to beginning of domain')
        choice(name: 'BASE_DOMAIN', choices: ['.techvvs.io', '.jenkins.codes'], description: 'domain')
    }


    stages {


        stage('Select Hostname') {
            steps {
                script {

                    // Define a map of tenants to IP addresses
                    TENANT_IP_MAP = [
                        'inventory_prod': '64.227.4.159',
                        'highland_prod': '157.230.91.190',
                        'inventory_test': '206.189.183.0',
                        'intake_prod': '64.227.18.215'
                    ]

                    // Define a map of tenants to IP addresses
                    // NOTE: this map has no ports attached, unlike the maps in the build jobs
                    POSTGRESQL_ENV_MAP_NO_PORT = [
                        'inventory_prod': '',
                        'highland_prod': 'jdbc:postgresql://private-postgresql-test1-do-user-1326368-0.d.db.ondigitalocean.com',
                        'inventory_test': 'jdbc:postgresql://private-postgresql-test1-do-user-1326368-0.d.db.ondigitalocean.com',
                        'intake_prod': 'private-postgresql-prod1-do-user-1326368-0.d.db.ondigitalocean.com'
                    ]


                    // Get the IP address for the selected tenant
                    def hostname = TENANT_IP_MAP[params.TENANT_ENV]
                    echo "Selected Tenant: ${params.TENANT_ENV}, IP Address: ${hostname}"

                    // Get the IP address for the selected tenant
                    def postgresql_db_uri = POSTGRESQL_ENV_MAP_NO_PORT[params.TENANT_ENV]
                    echo "Selected postgresql_db_uri: ${params.TENANT_ENV}, POSTGRE SQL DB URI: ${postgresql_db_uri}"

                    // Set the IP address as an environment variable for use in later stages
                    env.HOSTNAME = hostname
                    env.DB_URI = postgresql_db_uri
                }
            }
        }

        stage('Log int postgresql db and update user to active') {
            steps {
                script {

                    // Load multiple credentials simultaneously
                    withCredentials([
                         string(credentialsId: 'POSTGRE_TEST_DB_PASSWORD', variable: 'POSTGRE_TEST_DB_PASSWORD'),
                         string(credentialsId: 'POSTGRE_PROD_DB_PASSWORD', variable: 'POSTGRE_PROD_DB_PASSWORD')
                    ]){



                        sshagent(credentials: ['id_ed2_techvvs']) {

                            if (env.TENANT_ENV.contains('prod')) {
                                echo "Environment contains 'prod'. This is a production environment."
                                sh """
                                    PGPASSWORD="${POSTGRE_PROD_DB_PASSWORD}" psql -h ${env.DB_URI} -p 25060 -U doadmin -d ${env.TENANT_NAME} -c "UPDATE systemuser SET isactive = '1' WHERE name = '${env.SYSTEM_USER_TO_ACTIVATE}';"
                                """


                            } else if (env.TENANT_ENV.contains('test')) {
                                echo "Environment contains 'test'. This is a testing environment."
                                sh """
                                    PGPASSWORD="${POSTGRE_TEST_DB_PASSWORD}" psql -h ${env.DB_URI} -p 25060 -U doadmin -d ${env.TENANT_NAME} -c "UPDATE systemuser SET isactive = '1' WHERE name = '${env.SYSTEM_USER_TO_ACTIVATE}';"
                                """

                            } else {
                                echo "Environment is unknown or does not contain 'prod' or 'test'."
                            }



                        }






                    }

                }
            }
        }





    }
}
