## techvvs application settings ##

## timeout settings to not throw template error when uploading the initial xlsx
server.servlet.session.timeout=24h
server.connection-timeout=1000s

## need this otherwise cookies go in redriect uri
server.servlet.session.tracking-modes=cookie

load.ref.data=${LOAD_REF_DATA:no}
tax.percentage=${TAX_PERCENTAGE:0}
base.qr.domain=${BASE_QR_DOMAIN:}

## dev1 will make it skip email activation
## change to prod for deploying
## envs are dev1,prod
spring.profiles.active=${ENVIRONMENT_NAME:prod}
server.port=8081

security.jwt.token.secret-key=${JWT_SECRET_KEY:}


#server.servlet.context-path=/api
spring.web.resources.static-locations=classpath:/static/

logging.file.name=logs/sb-logs.log

## Api keys
twilio.api.username=${TWILIO_API_USER:}
twilio.api.password=${TWILIO_API_PASSWORD:}
sendgrid.api.key=${SENDGRID_API_KEY:}


## Thymeleaf cache needs to be set to false for hot reload while developing
spring.thymeleaf.cache=false
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
# change load path to resource folder instead of /target
spring.thymeleaf.prefix=classpath:/templates/
spring.resources.add-mappings=true
spring.resources.static-locations=classpath:/static/
spring.resources.cache.period=0


## start postgresql database settings:
## start postgresql database settings:
#spring.datasource.url=jdbc:postgresql://localhost:5432/northstar1
spring.datasource.url=${DB_URI:}
# The driver class name is optional; Spring Boot can usually figure this out.
spring.datasource.driver-class-name=${DB_DRIVER_CLASS_NAME:org.postgresql.Driver}
spring.jpa.database-platform=${DB_JPA_DATABASE_PLATFORM:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.properties.hibernate.dialect=${DB_JPA_HIBERNATE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}


##Database settings shared by all databases
## password needs to be "password" for dev env
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:password}
spring.jpa.hibernate.ddl-auto=${SPRING_DATABASE_ACTION:update}

## start h2 database settings
## The database will be filled at startup with data from data.sql
## spring.datasource.url defines the flatfile used to store our database data
#spring.datasource.url=jdbc:h2:file:./data/demo
#spring.datasource.driverClassName=org.h2.Driver
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=${DB_H2_CONSOLE_ENABLED:false}
## below property will make sure spring picks up data.sql file
#spring.sql.init.mode=always
spring.h2.console.settings.web-allow-others=${DB_H2_WEB_ALLOWOTHERS:false}
#spring.jpa.hibernate.ddl-auto=update
## end h2 database settings

## below property will make sure spring picks up data.sql file
#spring.sql.init.mode=always
#spring.h2.console.settings.web-allow-others=true
#spring.jpa.hibernate.ddl-auto=update

## QR MODE
qr.mode.leafly=true
qr.mode.media=true

spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:500MB}
spring.servlet.multipart.max-request-size=${MAX_REQ_SIZE:500MB}

## devtools logging
logging.level.web=DEBUG

## METRC API KEY
metrc.api-key-username=${METRC_API_KEY_USERNAME:}
metrc.api-key-password=${METRC_API_KEY_PASSWORD:}


# PayPal env: SANDBOX or PRODUCTION
paypal.environment=${PAYPAL_ENVIRONMENT:SANDBOX}

# Credentials from your app in paypal
paypal.client-id=${PAYPAL_CLIENT_ID:}
paypal.client-secret=${PAYPAL_CLIENT_SECRET:}

# Where PayPal sends the buyer after approval/cancel
paypal.return-url=${PAYPAL_RETURN_URL:/paypal/return}
paypal.cancel-url=${PAYPAL_CANCEL_URL:/paypal/cancel}

# Optional branding
paypal.brand-name=${PAYPAL_BRAND_NAME:my app}


############## START Spring Cloud Client Settings ##############
# Identify this application (used by Config Server to pick the right file, e.g., my-app-prod.properties)
### For spring.application.name=my-app and profile prod, the server will serve (in your config repo) files like:
#   my-app-prod.properties, my-app.properties, application-prod.properties, application.properties.
#spring.application.name=my-app
#
## Tell Spring to fetch external config from a Config Server
#spring.config.import=optional:configserver:
#
## Where the Config Server lives (set at deploy-time via env var; keep the file clean)
#spring.cloud.config.uri=${SPRING_CLOUD_CONFIG_URI}
#
## Optional: branch/label in your config repo (defaults to main)
#spring.cloud.config.label=${SPRING_CLOUD_CONFIG_LABEL:main}
#
## If your Config Server requires basic auth (again, set via env/secret at deploy)
#spring.cloud.config.username=${SPRING_CLOUD_CONFIG_USERNAME:}
#spring.cloud.config.password=${SPRING_CLOUD_CONFIG_PASSWORD:}
#
## Fail fast & retry so the app doesn?t start with missing config (recommended in prod)
#spring.cloud.config.fail-fast=true
#spring.cloud.config.retry.max-attempts=12
#spring.cloud.config.retry.initial-interval=1000
#spring.cloud.config.retry.multiplier=1.5
#spring.cloud.config.retry.max-interval=10000
############## END Cloud Client Settings ##############



############## START Google and Apple Wallet Api Settings ##############

# Brand
wallet.brand.organizationName=${WALLET_BRAND:Tulip}
wallet.brand.programName=${WALLET_BRAND_PROGRAM:Tulip Membership}

# Apple Wallet
#wallet.apple.passCertPath=/opt/keys/pass-cert.p12
#wallet.apple.passCertPassword=${PASS_CERT_PASSWORD}
#wallet.apple.appleWWDRCertPath=/opt/keys/AppleWWDRCAG3.pem
#wallet.apple.passTypeIdentifier=pass.com.your.brand.membership
#wallet.apple.teamIdentifier=ABCDE12345
#wallet.apple.templateFolder=/opt/pass-templates/membership
# Optional:
wallet.apple.webServiceUrl=
wallet.apple.authToken=

# Google Wallet
## todo: change this path to: classpath:/applecert/ - before deploying
wallet.google.serviceAccountKeyPath=${WALLET_GOOGLE_SERVICE_ACC_KEY_PATH:}
wallet.google.issuerId=${WALLET_GOOGLE_ISSUER_ID:}
wallet.google.classId=${WALLET_GOOGLE_CLASS_ID:}
############## END Google and Apple Wallet Api Settings ##############


##### START Metrc api ai documentation integration url
metrc.mcp.url=${METRC_MCP_URI:https://www.metrc.ai/mcp}
metrc.mcp.timeoutMillis=10000

# MCP connector (use either url or dxtPath; if both present, dxt wins)
metrc.mcp.dxtPath=${METRC_MCP_FILE_PATH:classpath:uploads/mcp/metrc-mcp-connector.dxt}
## set it to this for local development
#metrc.mcp.dxtPath=file:uploads/mcp/metrc-mcp-connector.dxt
# Retrieval behavior
# used if the user question returns no content
metrc.mcp.fallbackQuery=packages

##### END Metrc api ai documentation integration url


##### START Claude Integration
# Anthropic / Claude
anthropic.apiBase=https://api.anthropic.com
anthropic.apiKey=${ANTHROPIC_API_KEY:}
anthropic.version=2023-06-01
anthropic.model=claude-sonnet-4-20250514
anthropic.maxTokens=1024
anthropic.temperature=0.2

# Claude retry policy
anthropic.retry.maxAttempts=4
anthropic.retry.baseBackoffMillis=400
anthropic.retry.maxBackoffMillis=4000
anthropic.retry.jitterMillis=250

# Optional smaller token caps we will step down to on retries
anthropic.retry.maxTokensFallbacks=512,256

##### END Claude Integration


##### Jackson Configuration
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=UTC
spring.jackson.datatype.jsr310.enabled=true
spring.jackson.serialization.fail-on-empty-beans=false

##### Local METRC Documentation Configuration
metrcdocs.folder.path=./uploads/metrcdocs/
metrc.mcp.local.url=http://localhost:8080/api/mcp